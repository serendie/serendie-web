---
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import "@/index.css";
import Global from "@/layouts/Global.astro";
import { SideMenu } from "@/components/SideMenu";
import { Main, MainGrid } from "@/components/Main";
import { css } from "styled-system/css";
import { IndexPageHeader } from "@/components/IndexPageHeader";
import PageHeader from "@/components/PageHeader.astro";
import { PageAside, PageLinks, PageMain } from "@/components/PageLayout";
import StickySideNav from "@/components/StickySideNav.astro";

export async function getStaticPaths() {
  const pages = await getCollection("pages");

  return pages.map((page) => {
    return {
      params: {
        slug: page.slug,
      },
      props: { page },
    };
  });
}

const page = await getEntry("pages", Astro.params.slug);

if (!page) {
  return {
    status: 404,
    error: new Error("Page not found"),
  };
}

const currentDir = page.id.split("/").slice(0, -1).join("/");
const siblings = await getCollection(
  "pages",
  (page) =>
    // Filter out pages that in the same directory
    page.id.split("/").slice(0, -1).join("/") === currentDir &&
    // and filename does not have parent
    !page.data.parent
);

const propsForMdx = {
  siblings,
};

const { Content } = await page.render();
---

<Global title={page.data.title}>
  <MainGrid>
    <SideMenu
      links={siblings.map((link) => ({
        href: `/${link.slug}`,
        title: link.data.title,
        isActive: link.slug === page.slug || link.slug === page.data.parent,
      }))}
      client:idle
    />
    <Main
      className={css({
        display: "grid",
        gridTemplateColumns: "repeat(8, 1fr)",
        columnGap: "40px",
        mdDown: {
          gridTemplateColumns: "1fr",
          px: "24px",
        },
      })}
    >
      <PageHeader
        hideBorder={page.data.illustSize === "large"}
        links={page.data.subLinks}
      >
        <IndexPageHeader
          title={page.data.title}
          illustType={page.data.illustType}
          illustSize={page.data.illustSize}
          lastUpdated={page.data.lastUpdated}
          description={page.data.description}
        />
      </PageHeader>

      <PageMain gridColumn={page.data.fullWidth ? "span8" : undefined}>
        <Content {...propsForMdx} />
        {
          page.data.showSiblingLinks && (
            <PageLinks
              siblings={propsForMdx.siblings}
              currentSlug={page.slug}
            />
          )
        }
      </PageMain>
      <PageAside>
        <StickySideNav />
      </PageAside>
    </Main>
  </MainGrid>
</Global>
