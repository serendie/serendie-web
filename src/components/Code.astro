---
import { Box, Flex, styled } from "styled-system/jsx";
import { Code as AstroCode } from "astro:components";
import type { BundledLanguage } from "shiki";
import { StorybookButton } from "../components/StorybookButton.tsx";
import { css } from "styled-system/css";
import IconCopy from "../assets/icon/outline/copy.svg?react";
import IconChevronRight from "../assets/icon/outline/chevron-right.svg?react";

interface Props {
  title: string;
  description: string;
  code?: string;
  storyPath?: string;
  language?: BundledLanguage;
}

const { title, description, code, storyPath, language } = Astro.props;

const Container = styled("div", {
  base: {
    mb: "sd.system.dimension.spacing.threeExtraLarge",
  },
});

const SubTitle = styled("h2", {
  base: {
    fontWeight: "sd.reference.typography.fontWeight.bold",
    textStyle: "_Web.title.large.SP",
    sm: {
      textStyle: "_Web.title.large.PC",
    },
  },
});

const Description = styled("p", {
  base: {
    mb: "sd.system.dimension.spacing.medium",
  },
});

const StyledButton = styled("button", {
  base: {
    cursor: "pointer",
    "&:hover": {
      opacity: 0.7
    }
  },
});
---

<Container data-code-container>
  <Flex
    justifyContent={"space-between"}
    alignItems={"center"}
    mb="sd.system.dimension.spacing.small"
  >
    <SubTitle>{title}</SubTitle>
    {storyPath && <StorybookButton storyPath={storyPath} client:load />}
  </Flex>
  <Description mb="sd.system.dimension.spacing.twoExtraLarge"
    >{description}</Description
  >
  <Box
    border={"solid"}
    borderColor="sd.system.color.component.outline"
    borderWidth="sd.system.dimension.border.medium"
    borderRadius="sd.system.dimension.radius.large"
    overflow="hidden"
  >
    <Box
      p="sd.system.dimension.spacing.threeExtraLarge"
      borderBottomColor="sd.system.color.component.outline"
      borderBottomWidth={code ? "sd.system.dimension.border.medium" : "none"}
      overflowX="auto"
      sm={{
        overflowX: "visible",
      }}
    >
      <slot />
    </Box>
    {
      code && (
        <Box
          py="sd.system.dimension.spacing.extraLarge"
          px="sd.system.dimension.spacing.twoExtraLarge"
          bg="sd.reference.color.scale.gray.100"
        >
          <Flex
            justifyContent={"space-between"}
            py="sd.system.dimension.spacing.small"
            px="sd.system.dimension.spacing.extraSmall"
          >
            <StyledButton
              data-toggle-code
              display="inline-flex"
              alignItems={"center"}
              textStyle="sd.system.typography.body.medium_expanded"
            >
              <IconChevronRight width="20px"/> 
              <span class={css({ml: 'sd.system.dimension.spacing.extraSmall'})}>Code</span>
            </StyledButton>
            <StyledButton data-copy-button aria-label="Copy" display="flex">
              <>
                <span
                  class={css({
                    mr: "sd.system.dimension.spacing.extraSmall",
                    display: "none",
                    [`.copied &`]: {
                      display: "inline-block",
                    },
                  })}
                >
                  Copied
                </span>
                <IconCopy width="20px"/>
              </>
            </StyledButton>
          </Flex>
          <Box
            data-code-section
            style={{ display: "none" }}
            pt="sd.system.dimension.spacing.medium"
            px="sd.system.dimension.spacing.medium"
            fontSize="sd.reference.typography.scale.compact.small"
          >
            <AstroCode
              code={code}
              lang={language ?? "tsx"}
              theme={"github-light"}
              style="background: transparent"
            />
          </Box>
        </Box>
      )
    }
  </Box>
</Container>

<script>
  const containers = document.querySelectorAll("[data-code-container]");

  containers.forEach((container) => {
    const codeSection = container.querySelector("[data-code-section]");
    const toggleCode = container.querySelector("[data-toggle-code]");
    const copyButton = container.querySelector("[data-copy-button]");

    // コードセクションの表示切り替え
    toggleCode?.addEventListener("click", () => {
      if (codeSection) {
        const codeElement = codeSection as HTMLElement;
        codeElement.style.display =
          codeElement.style.display === "none" ? "block" : "none";
      }
    });

    // コードのコピー
    copyButton?.addEventListener("click", () => {
      if (codeSection) {
        const codeElement = codeSection as HTMLElement;
        navigator.clipboard.writeText(codeElement.innerText).then(() => {
          copyButton.setAttribute("aria-label", "Copied");
          copyButton.classList.add("copied");

          // 5秒後にコピー完了の表示を元に戻す
          setTimeout(() => {
            copyButton.setAttribute("aria-label", "Copy");
            copyButton.classList.remove("copied");
          }, 5000);
        });
      }
    });
  });
</script>
