---
import { css } from "styled-system/css/css";

interface Props {
  value: string;
  label?: string;
  width?: string;
}

const { value, label, width = "80px" } = Astro.props as Props;

function getTextColor(bgColor: string): string {
  const rgb = hexToRgb(bgColor);
  const luminance = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
  const threshold = 169; // 明度のしきい値
  return luminance > threshold ? "#000000" : "#FFFFFF";
}

function hexToRgb(hex: string): { r: number; g: number; b: number } {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
      }
    : { r: 0, g: 0, b: 0 };
}
---

<td class={css({ position: "relative", padding: 0 })} style={`width: ${width}`}>
  <div
    data-color={value}
    class={`group ${css({ 
      h: "48px", 
      position: "relative", 
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: "4px",
      transition: "transform 0.2s",
      _hover: {
        transform: "scale(1.05)",
      }
    })}`}
    style={`background-color: ${value}`}
  >
    {
      label && (
        <span
          class={css({
            fontSize: "12px",
            fontFamily: "sd.reference.typography.fontFamily.monospace",
            fontWeight: 500,
            opacity: 0.8,
          })}
          style={{
            color: getTextColor(value),
          }}
        >
          {label}
        </span>
      )
    }
    <span
      class={css({
        position: "absolute",
        left: "50%",
        top: "50%",
        transform: "translate(-50%, -50%)",
        fontSize: "12px",
        fontFamily: "sd.reference.typography.fontFamily.monospace",
        opacity: 0,
        backgroundColor: "rgba(255, 255, 255, 0.9)",
        padding: "4px 8px",
        borderRadius: "4px",
        boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
        color: "#000000",
        whiteSpace: "nowrap",
        _groupHover: {
          opacity: 1,
        },
      })}
    >
      {value}
    </span>
  </div>
</td>

<style>
  td {
    text-align: center;
    position: relative;
    height: 48px;
    box-sizing: content-box;
  }
</style>

<script>
  const colors = document.querySelectorAll("[data-color]");
  colors.forEach((color) => {
    color.addEventListener("click", () => {
      navigator.clipboard.writeText(color.getAttribute("data-color") || "");
      const span = color.querySelector("span:last-child");
      if (span) {
        const originalText = span.textContent;
        span.textContent = "コピーしました";
        setTimeout(() => {
          span.textContent = originalText;
        }, 1000);
      }
    });
  });
</script>